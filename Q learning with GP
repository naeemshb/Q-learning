from deap import creator, base, tools, gp
import numpy as np
import random
import operator

# Create types for Genetic Programming
creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", gp.PrimitiveTree, fitness=creator.FitnessMin)

pset = gp.PrimitiveSet("MAIN", arity=1)
pset.addPrimitive(operator.add, 2)
pset.addPrimitive(operator.sub, 2)
pset.addPrimitive(operator.mul, 2)

toolbox = base.Toolbox()
toolbox.register("expr", gp.genHalfAndHalf, pset=pset, min_=1, max_=2)
toolbox.register("individual", tools.initIterate, creator.Individual, toolbox.expr)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)
toolbox.register("compile", gp.compile, pset=pset)

# Q-Learning Params
Q = {}  # Q-table
alpha = 0.3
gamma = 0.9
states = [0, 1]  # Example states
actions = ['a', 'b']  # Example actions

# Initialize Q-values
for s in states:
    Q[s] = {}
    for a in actions:
        Q[s][a] = 0.0

# Reward function (for the sake of example)
def reward(state, action):
    if state == 0 and action == 'a':
        return 1
    elif state == 1 and action == 'b':
        return 2
    else:
        return 0

# Evaluate individual in GP
def evaluate(ind):
    func = toolbox.compile(ind)
    total_reward = 0
    for s in states:
        for a in actions:
            new_val = reward(s, a) + gamma * max(Q[s][a] for a in actions)
            Q[s][a] = (1 - alpha) * Q[s][a] + alpha * new_val
            policy = func(Q[s][a])
            total_reward += policy  # Add up the policy values
    return total_reward,

toolbox.register("evaluate", evaluate)
toolbox.register("select", tools.selTournament, tournsize=3)
toolbox.register("mate", gp.cxOnePoint)
toolbox.register("expr_mut", gp.genFull, min_=0, max_=2)
toolbox.register("mutate", gp.mutUniform, expr=toolbox.expr_mut, pset=pset)

# Main evolution loop
if __name__ == "__main__":
    pop = toolbox.population(n=100)
    for gen in range(20):
        offspring = toolbox.select(pop, len(pop))
        offspring = [toolbox.clone(ind) for ind in offspring]

        for ind1, ind2 in zip(offspring[::2], offspring[1::2]):
            if random.random() < 0.5:
                toolbox.mate(ind1, ind2)

        for ind in offspring:
            if random.random() < 0.2:
                toolbox.mutate(ind)

        fits = toolbox.map(toolbox.evaluate, offspring)
        for ind, fit in zip(offspring, fits):
            ind.fitness.values = fit

        pop = toolbox.select(offspring, k=len(pop))
